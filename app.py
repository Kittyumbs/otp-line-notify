import os
import pickle
import base64
import requests
import re
import time
import json
from googleapiclient.discovery import build
from google.auth.transport.requests import Request
from flask import Flask, render_template, request
from datetime import datetime

# Khai b√°o ph·∫°m vi quy·ªÅn truy c·∫≠p Gmail API
SCOPES = ["https://www.googleapis.com/auth/gmail.modify"]

def gmail_authenticate():
    """X√°c th·ª±c OAuth2 t·ª´ bi·∫øn m√¥i tr∆∞·ªùng tr√™n Heroku."""
    creds = None

    if "TOKEN_PICKLE" in os.environ:
        print("üìå T√¨m th·∫•y bi·∫øn m√¥i tr∆∞·ªùng TOKEN_PICKLE, b·∫Øt ƒë·∫ßu gi·∫£i m√£...")

        try:
            token_data = base64.b64decode(os.environ["TOKEN_PICKLE"])
            creds = pickle.loads(token_data)

            print("üìå Ki·ªÉm tra tr·∫°ng th√°i token...")

            if not creds:
                print("‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c credentials t·ª´ token!")
                return None

            if creds.expired and creds.refresh_token:
                print("üîÑ Token h·∫øt h·∫°n, th·ª≠ refresh...")
                creds.refresh(Request())
                print("‚úÖ Token ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi!")

            if not creds.valid:
                print("‚ùå Token kh√¥ng h·ª£p l·ªá ngay c·∫£ sau khi refresh!")
                return None

            print("‚úÖ X√°c th·ª±c Gmail API th√†nh c√¥ng!")
            return build("gmail", "v1", credentials=creds)

        except Exception as e:
            print(f"‚ùå L·ªói khi gi·∫£i m√£ ho·∫∑c l√†m m·ªõi TOKEN_PICKLE: {e}")
            return None

    print("‚ùå Kh√¥ng t√¨m th·∫•y bi·∫øn m√¥i tr∆∞·ªùng TOKEN_PICKLE!")
    return None

def get_recent_unread_otp_emails():
    """L·∫•y email OTP t·ª´ TikTok trong 5 ph√∫t g·∫ßn nh·∫•t v√† ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc."""
    service = gmail_authenticate()
if service is None:
    print("‚ö† Kh√¥ng th·ªÉ x√°c th·ª±c Gmail API.")
    # Log l·ªói chi ti·∫øt n·∫øu c·∫ßn
    app.logger.error("Token API kh√¥ng h·ª£p l·ªá!")
    return "Token API b·ªã l·ªói, vui l√≤ng li√™n h·ªá user 212078 - Anh Duy ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.", 500

    otp_codes = []
    
    try:
        # T√≠nh timestamp c·ªßa 5 ph√∫t tr∆∞·ªõc
        five_minutes_ago = int(time.time()) - 300
        query = f'from:register@account.tiktok.com is:unread after:{five_minutes_ago}'
        print(f"üìå Truy v·∫•n Gmail v·ªõi query: {query}")

        # T√¨m email ph√π h·ª£p
        results = service.users().messages().list(userId="me", q=query, maxResults=5).execute()
        messages = results.get("messages", [])

        if messages:
            print(f"‚úÖ T√¨m th·∫•y {len(messages)} email OTP ph√π h·ª£p trong 5 ph√∫t g·∫ßn nh·∫•t!")

            for msg in messages:
                message = service.users().messages().get(userId="me", id=msg["id"]).execute()
                subject = ""

                for header in message["payload"]["headers"]:
                    if header["name"] == "Subject":
                        subject = header["value"]
                        break

                print(f"üì© Ti√™u ƒë·ªÅ email: {subject}")

                # T√¨m OTP trong ti√™u ƒë·ªÅ email
                otp_match = re.search(r'\b\d{6}\b', subject)
                if otp_match:
                    otp_code = otp_match.group()
                    otp_codes.append(otp_code)
                    print(f"üîπ OTP t√¨m th·∫•y: {otp_code}")

                # ƒê√°nh d·∫•u email l√† ƒë√£ ƒë·ªçc
                try:
                    service.users().messages().modify(
                        userId="me",
                        id=msg["id"],
                        body={"removeLabelIds": ["UNREAD"], "addLabelIds": []}
                    ).execute()
                    print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t email {msg['id']} th√†nh 'ƒê√£ ƒë·ªçc'")
                except Exception as e:
                    print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i email: {e}")

        return otp_codes

    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y OTP t·ª´ Gmail: {e}")
        return []

def send_line_notify(message):
    """G·ª≠i OTP qua LINE Notify."""
    line_token = os.getenv("LINE_NOTIFY_TOKEN", "")

    if not line_token:
        print("‚ö† Kh√¥ng t√¨m th·∫•y LINE_NOTIFY_TOKEN trong bi·∫øn m√¥i tr∆∞·ªùng!")
        return False

    headers = {"Authorization": f"Bearer {line_token}"}
    data = {"message": message}
    response = requests.post("https://notify-api.line.me/api/notify", headers=headers, data=data)

    if response.status_code == 200:
        print("‚úÖ ƒê√£ g·ª≠i OTP qua LINE Notify th√†nh c√¥ng!")
        return True
    else:
        print(f"‚ùå L·ªói khi g·ª≠i LINE Notify: {response.text}")
        return False

# Flask app
app = Flask(__name__)

# Bi·∫øn to√†n c·ª•c l∆∞u l·ªãch s·ª≠ OTP
HISTORY_FILE = "/tmp/otp_history.json"

def load_history():
    try:
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, "r") as f:
                data = json.load(f)
                # Ki·ªÉm tra n·∫øu l·ªãch s·ª≠ l√† c·ªßa h√¥m nay
                if data and data[0]["time"].startswith(datetime.now().strftime("%Y-%m-%d")):
                    return data
        return []
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói ƒë·ªçc file l·ªãch s·ª≠: {e}")
        return []

def save_history(history):
    try:
        with open(HISTORY_FILE, "w") as f:
            json.dump(history, f)
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói ghi file l·ªãch s·ª≠: {e}")

@app.route('/')
def index():
    return render_template("index.html", history=load_history())

@app.route('/process_otp', methods=['POST'])
def process_otp():
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    history = load_history()

    try:
        otp_codes = get_recent_unread_otp_emails()

        if otp_codes:
            otp_message = f"üîπ ƒê√£ x·ª≠ l√Ω {len(otp_codes)} m√£ OTP: {', '.join(otp_codes)}"
            send_line_notify(otp_message)
        else:
            otp_message = "‚ö† Kh√¥ng c√≥ email OTP m·ªõi trong 5 ph√∫t g·∫ßn nh·∫•t."

    except Exception as e:
        otp_message = str(e)

    history.append({"time": timestamp, "result": otp_message})
    save_history(history)

    return otp_message


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
