# app.py
import os
import re
import json
import time
import base64
import pickle
import requests
from datetime import datetime
from pytz import timezone
from markupsafe import Markup
from flask import Flask, render_template, request
from flask import url_for
from flask_cors import CORS
from googleapiclient.discovery import build
from google.auth.transport.requests import Request

# L·∫•y GitHub Token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

# Ki·ªÉm tra n·∫øu token kh√¥ng t·ªìn t·∫°i trong m√¥i tr∆∞·ªùng
if GITHUB_TOKEN is None:
    raise ValueError("GITHUB_TOKEN kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong m√¥i tr∆∞·ªùng!")

# Th√¥ng tin v·ªÅ GitHub repository
GITHUB_REPO = "Kittyumbs/otp-line-notify"    

# Khai b√°o ph·∫°m vi Gmail API
SCOPES = ["https://www.googleapis.com/auth/gmail.modify"]

# T·∫°o Flask app
app = Flask(__name__)
CORS(app)

# File l∆∞u l·ªãch s·ª≠ OTP
HISTORY_FILE = "/tmp/otp_history.json"

def gmail_authenticate():
    """X√°c th·ª±c OAuth2 t·ª´ bi·∫øn m√¥i tr∆∞·ªùng TOKEN_PICKLE v√† t·ª± refresh n·∫øu c·∫ßn."""
    creds = None
    token_env = os.environ.get("TOKEN_PICKLE")

    if token_env:
        print("üìå T√¨m th·∫•y bi·∫øn m√¥i tr∆∞·ªùng TOKEN_PICKLE, ƒëang gi·∫£i m√£...")
        try:
            creds = pickle.loads(base64.b64decode(token_env))
            print("üìå Ki·ªÉm tra tr·∫°ng th√°i token...")

            if not creds or not creds.valid:
                if creds and creds.expired and creds.refresh_token:
                    print("üîÑ Token h·∫øt h·∫°n, ƒëang l√†m m·ªõi...")
                    creds.refresh(Request())
                    print("‚úÖ Token ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi!")

                    new_token_pickle = base64.b64encode(pickle.dumps(creds)).decode('utf-8')
                    update_heroku_token(new_token_pickle)
                else:
                    print("‚ùå Token kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu refresh_token.")
                    return None

            print("‚úÖ X√°c th·ª±c Gmail API th√†nh c√¥ng!")
            return build("gmail", "v1", credentials=creds)

        except Exception as e:
            print(f"‚ùå L·ªói khi gi·∫£i m√£ ho·∫∑c l√†m m·ªõi token: {e}")
            return None
    else:
        print("‚ùå Kh√¥ng t√¨m th·∫•y bi·∫øn m√¥i tr∆∞·ªùng TOKEN_PICKLE!")
        return None

def update_heroku_token(new_token):
    """C·∫≠p nh·∫≠t bi·∫øn m√¥i tr∆∞·ªùng TOKEN_PICKLE m·ªõi l√™n Heroku."""
    api_key = os.getenv("HEROKU_API_KEY")
    app_name = os.getenv("HEROKU_APP_NAME")

    if not api_key or not app_name:
        print("‚ö†Ô∏è HEROKU_API_KEY ho·∫∑c HEROKU_APP_NAME ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh.")
        return False

    url = f"https://api.heroku.com/apps/{app_name}/config-vars"
    headers = {
        "Accept": "application/vnd.heroku+json; version=3",
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    response = requests.patch(url, headers=headers, json={"TOKEN_PICKLE": new_token})

    if response.status_code == 200:
        print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t TOKEN_PICKLE m·ªõi l√™n Heroku.")
        return True
    else:
        print(f"‚ùå L·ªói c·∫≠p nh·∫≠t TOKEN_PICKLE: {response.text}")
        return False

def get_recent_unread_otp_emails():
    """L·∫•y OTP t·ª´ email TikTok ch∆∞a ƒë·ªçc trong 5 ph√∫t g·∫ßn nh·∫•t."""
    service = gmail_authenticate()
    if not service:
        app.logger.error("Token API kh√¥ng h·ª£p l·ªá!")
        return "Token API l·ªói, vui l√≤ng li√™n h·ªá h·ªó tr·ª£.", 500

    otp_codes = []
    five_minutes_ago = int(time.time()) - 300
    query = f"from:register@account.tiktok.com is:unread after:{five_minutes_ago}"

    print(f"üìå Truy v·∫•n Gmail v·ªõi: {query}")

    try:
        results = service.users().messages().list(userId="me", q=query, maxResults=5).execute()
        messages = results.get("messages", [])

        if not messages:
            return []

        print(f"‚úÖ T√¨m th·∫•y {len(messages)} email OTP.")

        for msg in messages:
            message = service.users().messages().get(userId="me", id=msg["id"]).execute()
            subject = next((h["value"] for h in message["payload"]["headers"] if h["name"] == "Subject"), "")

            print(f"üì© Ti√™u ƒë·ªÅ: {subject}")
            match = re.search(r'\b\d{6}\b', subject)
            if match:
                otp = match.group()
                otp_codes.append(otp)
                print(f"üîπ OTP t√¨m th·∫•y: {otp}")

            # ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
            service.users().messages().modify(
                userId="me",
                id=msg["id"],
                body={"removeLabelIds": ["UNREAD"]}
            ).execute()

        return otp_codes

    except Exception as e:
        print(f"‚ùå L·ªói khi truy v·∫•n Gmail: {e}")
        return []

# H√†m ƒë·ªçc l·ªãch s·ª≠ OTP t·ª´ GitHub
def load_history():
    url = f"https://api.github.com/repos/Kittyumbs/otp-line-notify/contents/otp_history.json"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            file_info = response.json()
            sha = file_info["sha"]
            
            # L·∫•y n·ªôi dung t·ªáp t·ª´ GitHub
            file_url = file_info["download_url"]
            file_response = requests.get(file_url)
            history_data = json.loads(file_response.text)
            today = datetime.now().strftime("%Y-%m-%d")
            
            # Ki·ªÉm tra l·ªãch s·ª≠ theo ng√†y
            if history_data and history_data[0]["time"].startswith(today):
                return history_data
        return []
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói ƒë·ªçc l·ªãch s·ª≠ t·ª´ GitHub: {e}")
        return []

def save_history(data):
    url = f"https://api.github.com/repos/Kittyumbs/otp-line-notify/contents/otp_history.json"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    
    try:
        # L·∫•y n·ªôi dung c≈© v√† th√¥ng tin sha
        response = requests.get(url, headers=headers)
        sha = None
        if response.status_code == 200:
            file_info = response.json()
            sha = file_info["sha"]

        # M√£ h√≥a d·ªØ li·ªáu th√†nh Base64
        encoded_content = base64.b64encode(json.dumps(data, indent=4).encode('utf-8')).decode('utf-8')

        # G·ª≠i y√™u c·∫ßu PUT ƒë·ªÉ l∆∞u t·ªáp l√™n GitHub
        commit_data = {
            "message": "Update OTP history",
            "content": encoded_content,  # D·ªØ li·ªáu ƒë√£ m√£ h√≥a Base64
            "sha": sha
        }

        # G·ª≠i y√™u c·∫ßu PUT ƒë·ªÉ l∆∞u d·ªØ li·ªáu
        response = requests.put(url, headers=headers, data=json.dumps(commit_data))
        if response.status_code == 201 or response.status_code == 200:
            print("‚úÖ L·ªãch s·ª≠ OTP ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o GitHub!")
        else:
            print(f"‚ùå L·ªói khi l∆∞u l·ªãch s·ª≠ OTP v√†o GitHub: {response.text}")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói ghi l·ªãch s·ª≠ v√†o GitHub: {e}")

@app.route("/")
def index():
    return render_template("index.html", history=load_history())

def privacy():
    return render_template("privacy.html")

@app.route("/process_otp", methods=["POST"])
def process_otp():
    vn_time = datetime.now(timezone("Asia/Ho_Chi_Minh")).strftime("%Y-%m-%d %H:%M:%S")
    history = load_history()

    try:
        otps = get_recent_unread_otp_emails()
        if otps:
            msg = f"<img src='{url_for('static', filename='success-icon.png')}' height='20'> ƒê√£ x·ª≠ l√Ω {len(otps)} m√£ OTP: {', '.join(otps)}"
        else:
            msg = f"<img src='{url_for('static', filename='Warning-icon.png')}' height='20'> Kh√¥ng c√≥ email OTP m·ªõi trong 5 ph√∫t g·∫ßn nh·∫•t."
    except Exception as e:
        msg = f"<img src='{url_for('static', filename='Warning-icon.png')}' height='20'> L·ªói x·ª≠ l√Ω OTP: {e}"

    history.append({"time": vn_time, "result": msg})
    save_history(history)

    return Markup(msg)  # ƒê·ªÉ Flask hi·ªÉu l√† HTML ch·ª© kh√¥ng escape

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
